// EventEmitter.js
export class EventEmitter {
  constructor() {
    this.events = {};
  }

  subscribe(event, callback) {
    if (!this.events[event]) {
      this.events[event] = [];
    }
    this.events[event].push(callback);
  }

  unsubscribe(event, callback) {
    if (this.events[event]) {
      this.events[event] = this.events[event].filter(cb => cb !== callback);
    }
  }

  publish(event, data) {
    if (this.events[event]) {
      this.events[event].forEach(callback => callback(data));
    }
  }
}

export const eventBus = new EventEmitter();


//Usage in react

// Publisher.js
import { eventBus } from './EventEmitter';

function Publisher() {
  const handleClick = () => {
    eventBus.publish('customEvent', 'Hello from Publisher!');
  };

  return <button onClick={handleClick}>Publish Event</button>;
}

export default Publisher;

// Publisher.js
import { eventBus } from './EventEmitter';

function Publisher() {
  const handleClick = () => {
    eventBus.publish('customEvent', 'Hello from Publisher!');
  };

  return <button onClick={handleClick}>Publish Event</button>;
}

export default Publisher;



// usage in react context
import React, { createContext, useContext, useState } from 'react';

const EventBusContext = createContext();

export const EventBusProvider = ({ children }) => {
  const [events, setEvents] = useState({});

  const publish = (event, data) => {
    if (events[event]) {
      events[event].forEach(callback => callback(data));
    }
  };

  const subscribe = (event, callback) => {
    setEvents(prev => ({
      ...prev,
      [event]: [...(prev[event] || []), callback],
    }));
  };

  const unsubscribe = (event, callback) => {
    setEvents(prev => ({
      ...prev,
      [event]: prev[event]?.filter(cb => cb !== callback) || [],
    }));
  };

  return (
    <EventBusContext.Provider value={{ publish, subscribe, unsubscribe }}>
      {children}
    </EventBusContext.Provider>
  );
};

export const useEventBus = () => useContext(EventBusContext);


// usage in react

// Publisher.js
import { useEventBus } from './EventBusContext';

function Publisher() {
  const { publish } = useEventBus();

  const handleClick = () => {
    publish('customEvent', 'Hello from Publisher!');
  };

  return <button onClick={handleClick}>Publish Event</button>;
}

export default Publisher;

// Subscriber.js
import { useEffect } from 'react';
import { useEventBus } from './EventBusContext';

function Subscriber() {
  const { subscribe, unsubscribe } = useEventBus();

  useEffect(() => {
    const handleEvent = (data) => {
      console.log(data); // Logs: Hello from Publisher!
    };

    subscribe('customEvent', handleEvent);

    return () => {
      unsubscribe('customEvent', handleEvent);
    };
  }, [subscribe, unsubscribe]);

  return <div>Subscriber Component</div>;
}

export default Subscriber;

