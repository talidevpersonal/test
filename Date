import React from "react";
import { Box, Typography, Accordion, AccordionSummary, AccordionDetails, Switch, Button } from "@mui/material";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";

const meetings = [
  { id: 1, time: "09:15", title: "Meeting 1 - Teams", needsCallReport: true },
  { id: 2, time: "09:45", title: "Meeting 2 - Discussion", needsCallReport: false },
  { id: 3, time: "13:00", title: "Meeting 3 - Emirates", needsCallReport: false },
  { id: 4, time: "09:15", title: "Meeting 4 - Standup", needsCallReport: true },
];

// Function to calculate position based on time
const calculatePosition = (time) => {
  const [hours, minutes] = time.split(":").map(Number);
  return (hours - 8) * 60 + minutes; // Minutes from 8:00 AM
};

// Function to group meetings by time slot
const groupMeetingsByTime = (meetings) => {
  const grouped = {};
  meetings.forEach((meeting) => {
    if (!grouped[meeting.time]) {
      grouped[meeting.time] = [];
    }
    grouped[meeting.time].push(meeting);
  });
  return grouped;
};

const Calendar = () => {
  const groupedMeetings = groupMeetingsByTime(meetings);

  return (
    <Box sx={{ position: "relative", width: "100%", maxWidth: 600, mx: "auto", mt: 3 }}>
      {/* Calendar Header */}
      <Typography variant="h6" textAlign="center">
        December 2024
      </Typography>

      {/* Calendar Body */}
      <Box sx={{ display: "grid", gridTemplateColumns: "1fr", position: "relative" }}>
        {/* Timeslot Indicators */}
        {Array.from({ length: 12 }, (_, i) => (
          <Box
            key={i}
            sx={{
              position: "relative",
              height: "60px",
              borderBottom: "1px solid #ddd",
            }}
          >
            <Typography
              variant="body2"
              sx={{
                position: "absolute",
                left: -50,
                top: "10px",
                color: "gray",
              }}
            >
              {`${(8 + i).toString().padStart(2, "0")}:00`}
            </Typography>
          </Box>
        ))}

        {/* Meeting Panels */}
        {Object.keys(groupedMeetings).map((time, index) => {
          const meetingsAtTime = groupedMeetings[time];

          return meetingsAtTime.map((meeting, idx) => (
            <Box
              key={meeting.id}
              sx={{
                position: "absolute",
                top: calculatePosition(time) + "px",
                left: `${idx * 20}px`, // Offset overlapping meetings
                width: "calc(100% - 20px)", // Adjust width based on offset
                zIndex: 2,
                borderLeft: "4px solid #1976d2", // Blue left border
                borderBottom: "1px solid #ddd", // Bottom border
                bgcolor: "#f9f9f9", // Light background
                padding: "10px",
                borderRadius: "4px",
              }}
            >
              <Accordion elevation={0}>
                <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                  <Typography>{meeting.title}</Typography>
                </AccordionSummary>
                <AccordionDetails>
                  <Box sx={{ display: "flex", flexDirection: "column", gap: 2 }}>
                    <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
                      <Switch checked={meeting.needsCallReport} />
                      <Typography>Needs call report</Typography>
                    </Box>
                    <Button variant="outlined" startIcon={<ExpandMoreIcon />}>
                      + Call report
                    </Button>
                  </Box>
                </AccordionDetails>
              </Accordion>
            </Box>
          ));
        })}
      </Box>
    </Box>
  );
};

export default Calendar;
