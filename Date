import React, { useState } from "react";
import { Box, Typography, List, ListItem, ListItemText } from "@mui/material";
import { LocalizationProvider } from "@mui/x-date-pickers";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { StaticDatePicker } from "@mui/x-date-pickers/StaticDatePicker";
import dayjs from "dayjs";

const Calendar = () => {
  const [selectedDate, setSelectedDate] = useState(dayjs());
  const meetings = [
    { id: 1, title: "MAF - Teams meeting", time: "09:00 AM", date: "2024-12-21" },
    {
      id: 2,
      title: "My meeting - In-person",
      time: "12:00 PM",
      date: "2024-12-21",
    },
  ];

  const weeklyMeetings = meetings.filter(
    (meeting) =>
      dayjs(meeting.date).isAfter(selectedDate.startOf("week")) &&
      dayjs(meeting.date).isBefore(selectedDate.endOf("week"))
  );

  return (
    <LocalizationProvider dateAdapter={AdapterDayjs}>
      <Box display="flex" flexDirection="column" alignItems="center" p={2}>
        <Typography variant="h5" gutterBottom>
          Weekly Calendar View
        </Typography>
        <StaticDatePicker
          displayStaticWrapperAs="desktop"
          views={["day"]}
          value={selectedDate}
          onChange={(newValue) => setSelectedDate(newValue)}
        />
        <Box mt={3}>
          <Typography variant="h6">Meetings This Week:</Typography>
          <List>
            {weeklyMeetings.length ? (
              weeklyMeetings.map((meeting) => (
                <ListItem key={meeting.id}>
                  <ListItemText
                    primary={meeting.title}
                    secondary={`${meeting.time} on ${dayjs(meeting.date).format(
                      "MMMM D, YYYY"
                    )}`}
                  />
                </ListItem>
              ))
            ) : (
              <Typography>No meetings scheduled.</Typography>
            )}
          </List>
        </Box>
      </Box>
    </LocalizationProvider>
  );
};

export default Calendar;
