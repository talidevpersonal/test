import { useEffect } from "react";

const AdobeLaunchDebugger = () => {
  useEffect(() => {
    // Ensure Adobe Launch is available
    window._satellite = window._satellite || {};
    window._satellite._monitors = window._satellite._monitors || [];

    // Add debugging listeners
    window._satellite._monitors.push({
      ruleTriggered: (event) => console.log("Rule Triggered:", event.rule),
      ruleCompleted: (event) => console.log("Rule Completed:", event.rule),
      ruleConditionFailed: (event) =>
        console.log("Rule Condition Failed:", event.rule, event.condition),
    });

    // Inject Adobe Launch script dynamically (if not already present)
    if (!document.getElementById("adobe-launch-script")) {
      const script = document.createElement("script");
      script.src =
        "https://assets.adobedtm.com/launch-EN5bfa516febde4b22b3e7c6f96f6b439f.min.js";
      script.async = true;
      script.id = "adobe-launch-script";
      document.head.appendChild(script);
    }

    // Ensure page load tracking
    const triggerPageBottom = () => {
      if (window._satellite && window._satellite.pageBottom) {
        window._satellite.pageBottom();
      }
    };

    triggerPageBottom();
  }, []);

  return null; // This component doesn't render anything
};

export default AdobeLaunchDebugger;

import React from "react";
import AdobeLaunchDebugger from "./components/AdobeLaunchDebugger";

const App = () => {
  return (
    <div>
      <AdobeLaunchDebugger />
      <h1>Click me!</h1>
    </div>
  );
};

export default App;

import { useEffect } from "react";

const ClickTracker = ({ selector, eventName }) => {
  useEffect(() => {
    const element = document.querySelector(selector);
    if (element) {
      element.addEventListener("click", () => {
        if (window._satellite) {
          console.log(`Sending ${eventName} to Adobe Launch...`);
          window._satellite.track(eventName, { message: `${selector} clicked!` });
        } else {
          console.warn("Adobe Launch is not available.");
        }
      });
    }
  }, [selector, eventName]);

  return null;
};

export default ClickTracker;

import ClickTracker from "./components/ClickTracker";

const App = () => {
  return (
    <div>
      <AdobeLaunchDebugger />
      <ClickTracker selector="h1" eventName="test_click_event" />
      <h1>Click me!</h1>
    </div>
  );
};


No, **it is not necessary** to use the `debugger` keyword with Adobe Launch. However, you can enable debugging in a **better way** using Adobe's built-in tools.

---

### **✅ Recommended Ways to Debug Adobe Launch (Without `debugger`)**

### **1️⃣ Enable Debug Mode in Local Storage**  
Run this in your **browser console** (`F12 → Console`):  
```js
localStorage.setItem("satellite_debug", true);
```
📌 This **enables debug logs** for Adobe Launch in the browser console.  

**To disable it:**  
```js
localStorage.removeItem("satellite_debug");
```

---

### **2️⃣ Use `_satellite.logger.debug()` Instead of `debugger`**  
Instead of using `debugger`, use Adobe's built-in logger:  
```js
_satellite.logger.debug("This is a debug message");
```
📌 This **logs the message only if debugging is enabled**, keeping your code cleaner.

---

### **3️⃣ Use the Adobe Experience Cloud Debugger Tool**  
- Install the **Adobe Experience Platform Debugger** Chrome extension.  
- Open the extension → Click **"Enable Debugging"**.  
- View real-time rule executions and network calls.

📌 **Best for inspecting rules, conditions, and variables.**

---

### **4️⃣ Check Rule Execution with `_satellite._monitors`**  
Instead of `debugger`, track rule execution with this:  
```js
window._satellite._monitors = window._satellite._monitors || [];
window._satellite._monitors.push({
  ruleTriggered: (event) => console.log("Rule Triggered:", event.rule),
  ruleCompleted: (event) => console.log("Rule Completed:", event.rule),
  ruleConditionFailed: (event) =>
    console.log("Rule Condition Failed:", event.rule, event.condition),
});
```
📌 This **logs all rule executions** without pausing code execution like `debugger`.

---

### **🚀 Conclusion: Use Debugging Tools, Not `debugger`**
❌ `debugger` **stops script execution**, which may break event tracking.  
✅ **Use `_satellite.logger.debug()`, browser logs, and the Adobe Debugger Tool** for real-time debugging.  

Would you like help setting up **custom debug logs for Adobe Launch rules?**
