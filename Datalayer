Creating reusable React hooks and components for managing the **Adobe Data Layer** is a great way to standardize and simplify tracking in your application. Below, I'll show you how to create:

1. **A custom hook** for managing the Adobe Data Layer.
2. **A reusable component** for tracking page views.
3. **A reusable component** for tracking custom events.

---

### 1. **Custom Hook for Adobe Data Layer**
This hook will manage the `adobeDataLayer` object and provide functions to push data into it.

```javascript
import { useEffect, useRef } from "react";

const useAdobeDataLayer = () => {
  // Initialize the Adobe Data Layer if it doesn't exist
  useEffect(() => {
    window.adobeDataLayer = window.adobeDataLayer || [];
  }, []);

  // Function to push data into the Adobe Data Layer
  const pushToDataLayer = (data) => {
    if (window.adobeDataLayer) {
      window.adobeDataLayer.push(data);
    } else {
      console.error("Adobe Data Layer is not initialized.");
    }
  };

  return { pushToDataLayer };
};

export default useAdobeDataLayer;
```

---

### 2. **Reusable Component for Tracking Page Views**
This component will automatically track page views when it mounts.

```javascript
import React, { useEffect } from "react";
import useAdobeDataLayer from "./useAdobeDataLayer";

const AdobePageViewTracker = ({ pageName, pageCategory }) => {
  const { pushToDataLayer } = useAdobeDataLayer();

  useEffect(() => {
    // Push page view data to the Adobe Data Layer
    pushToDataLayer({
      event: "pageView",
      page: {
        name: pageName,
        category: pageCategory,
      },
    });
  }, [pageName, pageCategory, pushToDataLayer]);

  return null; // This component doesn't render anything
};

export default AdobePageViewTracker;
```

**Usage Example**:
```jsx
import AdobePageViewTracker from "./AdobePageViewTracker";

const HomePage = () => {
  return (
    <div>
      <h1>Home Page</h1>
      <AdobePageViewTracker pageName="Home Page" pageCategory="Main" />
    </div>
  );
};

export default HomePage;
```

---

### 3. **Reusable Component for Tracking Custom Events**
This component will allow you to track custom events (e.g., button clicks, form submissions).

```javascript
import React from "react";
import useAdobeDataLayer from "./useAdobeDataLayer";

const AdobeEventTracker = ({ eventName, eventData }) => {
  const { pushToDataLayer } = useAdobeDataLayer();

  const handleTrackEvent = () => {
    // Push custom event data to the Adobe Data Layer
    pushToDataLayer({
      event: eventName,
      ...eventData,
    });
  };

  return (
    <button onClick={handleTrackEvent}>
      Track Event
    </button>
  );
};

export default AdobeEventTracker;
```

**Usage Example**:
```jsx
import AdobeEventTracker from "./AdobeEventTracker";

const ContactForm = () => {
  const handleFormSubmit = () => {
    console.log("Form submitted!");
  };

  return (
    <form onSubmit={handleFormSubmit}>
      <input type="text" placeholder="Name" />
      <input type="email" placeholder="Email" />
      <AdobeEventTracker
        eventName="formSubmitted"
        eventData={{
          form: {
            name: "Contact Form",
            fields: {
              email: "user@example.com",
            },
          },
        }}
      />
    </form>
  );
};

export default ContactForm;
```

---

### 4. **Putting It All Together**
Hereâ€™s how you can use these reusable components and hooks in your React app:

```jsx
import React from "react";
import AdobePageViewTracker from "./AdobePageViewTracker";
import AdobeEventTracker from "./AdobeEventTracker";

const App = () => {
  return (
    <div>
      {/* Track page view */}
      <AdobePageViewTracker pageName="Home Page" pageCategory="Main" />

      {/* Track custom event */}
      <AdobeEventTracker
        eventName="buttonClicked"
        eventData={{
          button: {
            name: "Learn More",
            location: "Hero Section",
          },
        }}
      />
    </div>
  );
};

export default App;
```

---

### 5. **Key Features**
- **Reusable**: The hook and components can be reused across your application.
- **Decoupled**: Tracking logic is separated from your main application logic.
- **Flexible**: You can easily extend the `pushToDataLayer` function to support more complex tracking scenarios.

---

### 6. **Best Practices**
- **Consistent Data Structure**: Use a consistent structure for the data pushed to the Adobe Data Layer.
- **Testing**: Test your tracking implementation using Adobe Experience Platform Debugger.
- **Privacy Compliance**: Ensure you comply with privacy regulations (e.g., GDPR, CCPA) by informing users and obtaining consent if required.

---

By using these reusable hooks and components, you can simplify Adobe Data Layer integration in your React app and ensure consistent tracking across your application.
