const express = require('express');
const fs = require('fs');
const app = express();
const port = 3000;

// Read transactions from transaction.json
let transactions = [];
try {
  const data = fs.readFileSync('transaction.json', 'utf-8');
  transactions = JSON.parse(data);
} catch (error) {
  console.error('Error reading transaction.json:', error);
}

// Helper function to filter transactions by date range and compare MTD, QTD, YTD
const filterAndCompareTransactions = (transactions, period) => {
  const currentDate = new Date();

  // Helper functions to calculate date ranges
  const getStartOfMonth = (date) => new Date(date.getFullYear(), date.getMonth(), 1);
  const getStartOfQuarter = (date) => new Date(date.getFullYear(), Math.floor(date.getMonth() / 3) * 3, 1);
  const getStartOfYear = (date) => new Date(date.getFullYear(), 0, 1);

  let startDate;
  switch (period) {
    case 'MTD':
      startDate = getStartOfMonth(currentDate);
      break;
    case 'QTD':
      startDate = getStartOfQuarter(currentDate);
      break;
    case 'YTD':
      startDate = getStartOfYear(currentDate);
      break;
    default:
      throw new Error('Invalid period');
  }

  // Filter transactions by date range
  const filteredTransactions = transactions.filter((transaction) => {
    const transactionDate = new Date(transaction.date);
    return transactionDate >= startDate && transactionDate <= currentDate;
  });

  // Aggregate data
  const aggregated = filteredTransactions.reduce(
    (acc, transaction) => {
      acc.TOTAL_TRANSACTION_VALUE += transaction.TOTAL_TRANSACTION_VALUE;
      acc.TOTAL_TRANSACTION_VOLUME += transaction.TOTAL_TRANSACTION_VOLUME;
      return acc;
    },
    {
      TOTAL_TRANSACTION_VALUE: 0,
      TOTAL_TRANSACTION_VOLUME: 0,
    }
  );

  return {
    ...aggregated,
    period,
    transactionCount: filteredTransactions.length,
  };
};

// Define API endpoint
app.get('/transactions', (req, res) => {
  const { period } = req.query; // Expect period to be MTD, QTD, or YTD

  if (!['MTD', 'QTD', 'YTD'].includes(period)) {
    return res.status(400).json({ error: 'Invalid period. Use MTD, QTD, or YTD.' });
  }

  const result = filterAndCompareTransactions(transactions, period);
  res.json(result);
});

// Start server
app.listen(port, () => {
  console.log(`Transaction API server running at http://localhost:${port}`);
});
