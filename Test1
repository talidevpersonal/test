
npm install @adobe/reactor-extension-core adobe-client-data-layer
<script src="https://assets.adobedtm.com/your-launch-script.js" async></script>
const trackEvent = (eventName, data = {}) => {
  if (window._satellite) {
    window._satellite.track(eventName, data);
  } else {
    console.warn("Adobe Launch (DTM) is not available");
  }
};

const trackPageView = (pageName) => {
  if (window.s) {
    window.s.pageName = pageName;
    window.s.t(); // Send page view event
  } else {
    console.warn("Adobe Analytics object not available");
  }
};

export { trackEvent, trackPageView };


import { useEffect } from "react";
import { useLocation } from "react-router-dom";
import { trackPageView } from "./utils/analytics";

const AnalyticsTracker = () => {
  const location = useLocation();

  useEffect(() => {
    trackPageView(location.pathname);
  }, [location]);

  return null;
};

export default AnalyticsTracker;


import { trackEvent } from "../utils/analytics";

const handleButtonClick = () => {
  trackEvent("button_click", { button: "signup" });
};


<button onClick={handleButtonClick}>Sign Up</button>

### **Creating React Hooks for Adobe Analytics (Adobe Launch)**  

You can create **custom React hooks** to track **page views, events, and user interactions** in Adobe Analytics via **Adobe Launch**.

---

## **1. Create a Hook for Page Views**
This hook automatically tracks **page views** whenever the route changes.

### **`useAdobePageView.js`**
```javascript
import { useEffect } from "react";
import { useLocation } from "react-router-dom";

const useAdobePageView = () => {
  const location = useLocation();

  useEffect(() => {
    if (window.s) {
      window.s.pageName = location.pathname;
      window.s.t(); // Adobe Analytics page view tracking
    } else {
      console.warn("Adobe Analytics (s object) not found.");
    }
  }, [location]);
};

export default useAdobePageView;
```

#### **How to Use It in `App.js`**
```javascript
import useAdobePageView from "./hooks/useAdobePageView";

const App = () => {
  useAdobePageView();

  return (
    <div>
      <h1>My React App</h1>
    </div>
  );
};

export default App;
```

---

## **2. Create a Hook for Tracking Events**
This hook allows you to track **button clicks, form submissions, and other events**.

### **`useAdobeEventTracking.js`**
```javascript
const useAdobeEventTracking = () => {
  const trackEvent = (eventName, data = {}) => {
    if (window._satellite) {
      window._satellite.track(eventName, data);
    } else {
      console.warn("Adobe Launch is not available.");
    }
  };

  return trackEvent;
};

export default useAdobeEventTracking;
```

#### **How to Use It in a Component**
```javascript
import useAdobeEventTracking from "../hooks/useAdobeEventTracking";

const MyComponent = () => {
  const trackEvent = useAdobeEventTracking();

  const handleButtonClick = () => {
    trackEvent("button_click", { button: "signup" });
  };

  return <button onClick={handleButtonClick}>Sign Up</button>;
};

export default MyComponent;
```

---

## **3. Create a Hook for Tracking Form Interactions**
This hook tracks **form field changes and form abandonment**.

### **`useAdobeFormTracking.js`**
```javascript
import { useEffect } from "react";

const useAdobeFormTracking = (formId) => {
  useEffect(() => {
    const form = document.getElementById(formId);
    if (!form) return;

    const handleChange = (event) => {
      if (window._satellite) {
        window._satellite.track("form_field_interaction", {
          fieldName: event.target.name,
          fieldValue: event.target.value,
        });
      }
    };

    const handleBlur = () => {
      if (window._satellite) {
        window._satellite.track("form_abandonment", { formId });
      }
    };

    form.addEventListener("input", handleChange);
    window.addEventListener("beforeunload", handleBlur);

    return () => {
      form.removeEventListener("input", handleChange);
      window.removeEventListener("beforeunload", handleBlur);
    };
  }, [formId]);
};

export default useAdobeFormTracking;
```

#### **How to Use It in a Form Component**
```javascript
import useAdobeFormTracking from "../hooks/useAdobeFormTracking";

const SignupForm = () => {
  useAdobeFormTracking("signupForm");

  return (
    <form id="signupForm">
      <input type="text" name="username" placeholder="Username" />
      <input type="email" name="email" placeholder="Email" />
      <button type="submit">Submit</button>
    </form>
  );
};

export default SignupForm;
```

---

### **Why Use React Hooks for Adobe Analytics?**
✔ **Reusable** – Use in any component without duplicating tracking logic.  
✔ **Separation of Concerns** – Keeps tracking logic separate from UI code.  
✔ **Performance Optimized** – Hooks only run when dependencies change.  

Would you like help with **debugging Adobe Analytics events in React?**

—----------------------
### **Creating React Hooks for Adobe Analytics (Adobe Launch)**  

You can create **custom React hooks** to track **page views, events, and user interactions** in Adobe Analytics via **Adobe Launch**.

---

## **1. Create a Hook for Page Views**
This hook automatically tracks **page views** whenever the route changes.

### **`useAdobePageView.js`**
```javascript
import { useEffect } from "react";
import { useLocation } from "react-router-dom";

const useAdobePageView = () => {
  const location = useLocation();

  useEffect(() => {
    if (window.s) {
      window.s.pageName = location.pathname;
      window.s.t(); // Adobe Analytics page view tracking
    } else {
      console.warn("Adobe Analytics (s object) not found.");
    }
  }, [location]);
};

export default useAdobePageView;
```

#### **How to Use It in `App.js`**
```javascript
import useAdobePageView from "./hooks/useAdobePageView";

const App = () => {
  useAdobePageView();

  return (
    <div>
      <h1>My React App</h1>
    </div>
  );
};

export default App;
```

---

## **2. Create a Hook for Tracking Events**
This hook allows you to track **button clicks, form submissions, and other events**.

### **`useAdobeEventTracking.js`**
```javascript
const useAdobeEventTracking = () => {
  const trackEvent = (eventName, data = {}) => {
    if (window._satellite) {
      window._satellite.track(eventName, data);
    } else {
      console.warn("Adobe Launch is not available.");
    }
  };

  return trackEvent;
};

export default useAdobeEventTracking;
```

#### **How to Use It in a Component**
```javascript
import useAdobeEventTracking from "../hooks/useAdobeEventTracking";

const MyComponent = () => {
  const trackEvent = useAdobeEventTracking();

  const handleButtonClick = () => {
    trackEvent("button_click", { button: "signup" });
  };

  return <button onClick={handleButtonClick}>Sign Up</button>;
};

export default MyComponent;
```

---

## **3. Create a Hook for Tracking Form Interactions**
This hook tracks **form field changes and form abandonment**.

### **`useAdobeFormTracking.js`**
```javascript
import { useEffect } from "react";

const useAdobeFormTracking = (formId) => {
  useEffect(() => {
    const form = document.getElementById(formId);
    if (!form) return;

    const handleChange = (event) => {
      if (window._satellite) {
        window._satellite.track("form_field_interaction", {
          fieldName: event.target.name,
          fieldValue: event.target.value,
        });
      }
    };

    const handleBlur = () => {
      if (window._satellite) {
        window._satellite.track("form_abandonment", { formId });
      }
    };

    form.addEventListener("input", handleChange);
    window.addEventListener("beforeunload", handleBlur);

    return () => {
      form.removeEventListener("input", handleChange);
      window.removeEventListener("beforeunload", handleBlur);
    };
  }, [formId]);
};

export default useAdobeFormTracking;
```

#### **How to Use It in a Form Component**
```javascript
import useAdobeFormTracking from "../hooks/useAdobeFormTracking";

const SignupForm = () => {
  useAdobeFormTracking("signupForm");

  return (
    <form id="signupForm">
      <input type="text" name="username" placeholder="Username" />
      <input type="email" name="email" placeholder="Email" />
      <button type="submit">Submit</button>
    </form>
  );
};

export default SignupForm;
```

---

### **Why Use React Hooks for Adobe Analytics?**
✔ **Reusable** – Use in any component without duplicating tracking logic.  
✔ **Separation of Concerns** – Keeps tracking logic separate from UI code.  
✔ **Performance Optimized** – Hooks only run when dependencies change.  

Would you like help with **debugging Adobe Analytics events in React?**


### **Do You Need to Follow Adobe Launch Rule Setup When Using React Hooks?**  

**Yes, if you're using Adobe Launch, you still need to set up rules there** even when using React hooks.  

### **Why?**  
- React hooks **trigger** events inside your app, but Adobe Launch needs **rules** to capture them and send the data to Adobe Analytics.  
- **React hooks only handle event listeners in React**, but Adobe Launch rules determine **when and how** data is sent to Adobe Analytics.  

---

### **How Hooks and Adobe Launch Work Together**  

| **Component** | **Responsible For** | **Needed?** |
|--------------|------------------|------------|
| **React Hook (`useAdobeFormTracking`)** | Detects field interactions inside React | ✅ Yes |
| **Adobe Launch Rule** | Captures the event and sends data to Adobe Analytics | ✅ Yes |

---

### **How to Integrate React Hooks with Adobe Launch**  

#### **1. Use a Hook to Detect Form Field Changes in React**
```javascript
import { useEffect } from "react";

const useAdobeFormTracking = (formId) => {
  useEffect(() => {
    const form = document.getElementById(formId);
    if (!form) return;

    const handleChange = (event) => {
      if (window._satellite) {
        window._satellite.track("form_field_interaction", {
          fieldName: event.target.name,
          fieldValue: event.target.value,
        });
      }
    };

    form.addEventListener("input", handleChange);
    return () => form.removeEventListener("input", handleChange);
  }, [formId]);
};

export default useAdobeFormTracking;
```

#### **2. Create a Rule in Adobe Launch to Capture These Events**  
1. **Go to** **Adobe Experience Platform Data Collection**.  
2. **Navigate to Rules** → Click **"Create New Rule"**.  
3. **Set Up the Rule**:  
   - **Name**: `"Track Form Field Interaction"`  
   - **Event Type**: `"Core – Direct Call"`  
   - **Event Name**: `form_field_interaction`  
   - **Conditions** *(Optional)*: Filter by form field names.  
4. **Set Adobe Analytics Variables**:  
   - `eVar10 = %fieldName%`  
   - `eVar11 = %fieldValue%`  
5. **Send the Beacon**:  
   - **Action → Adobe Analytics – Send Beacon (`s.tl()`)**  

---

### **Final Answer: Do You Need Adobe Launch Rules?**  
✔ **Yes**, even when using React hooks, you still need Adobe Launch rules to handle **event tracking and data collection**.  

Would you like help setting up **data elements** in Adobe Launch for better tracking?
