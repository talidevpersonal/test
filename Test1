
npm install @adobe/reactor-extension-core adobe-client-data-layer
<script src="https://assets.adobedtm.com/your-launch-script.js" async></script>
const trackEvent = (eventName, data = {}) => {
  if (window._satellite) {
    window._satellite.track(eventName, data);
  } else {
    console.warn("Adobe Launch (DTM) is not available");
  }
};

const trackPageView = (pageName) => {
  if (window.s) {
    window.s.pageName = pageName;
    window.s.t(); // Send page view event
  } else {
    console.warn("Adobe Analytics object not available");
  }
};

export { trackEvent, trackPageView };


import { useEffect } from "react";
import { useLocation } from "react-router-dom";
import { trackPageView } from "./utils/analytics";

const AnalyticsTracker = () => {
  const location = useLocation();

  useEffect(() => {
    trackPageView(location.pathname);
  }, [location]);

  return null;
};

export default AnalyticsTracker;


import { trackEvent } from "../utils/analytics";

const handleButtonClick = () => {
  trackEvent("button_click", { button: "signup" });
};


<button onClick={handleButtonClick}>Sign Up</button>

### **Creating React Hooks for Adobe Analytics (Adobe Launch)**  

You can create **custom React hooks** to track **page views, events, and user interactions** in Adobe Analytics via **Adobe Launch**.

---

## **1. Create a Hook for Page Views**
This hook automatically tracks **page views** whenever the route changes.

### **`useAdobePageView.js`**
```javascript
import { useEffect } from "react";
import { useLocation } from "react-router-dom";

const useAdobePageView = () => {
  const location = useLocation();

  useEffect(() => {
    if (window.s) {
      window.s.pageName = location.pathname;
      window.s.t(); // Adobe Analytics page view tracking
    } else {
      console.warn("Adobe Analytics (s object) not found.");
    }
  }, [location]);
};

export default useAdobePageView;
```

#### **How to Use It in `App.js`**
```javascript
import useAdobePageView from "./hooks/useAdobePageView";

const App = () => {
  useAdobePageView();

  return (
    <div>
      <h1>My React App</h1>
    </div>
  );
};

export default App;
```

---

## **2. Create a Hook for Tracking Events**
This hook allows you to track **button clicks, form submissions, and other events**.

### **`useAdobeEventTracking.js`**
```javascript
const useAdobeEventTracking = () => {
  const trackEvent = (eventName, data = {}) => {
    if (window._satellite) {
      window._satellite.track(eventName, data);
    } else {
      console.warn("Adobe Launch is not available.");
    }
  };

  return trackEvent;
};

export default useAdobeEventTracking;
```

#### **How to Use It in a Component**
```javascript
import useAdobeEventTracking from "../hooks/useAdobeEventTracking";

const MyComponent = () => {
  const trackEvent = useAdobeEventTracking();

  const handleButtonClick = () => {
    trackEvent("button_click", { button: "signup" });
  };

  return <button onClick={handleButtonClick}>Sign Up</button>;
};

export default MyComponent;
```

---

## **3. Create a Hook for Tracking Form Interactions**
This hook tracks **form field changes and form abandonment**.

### **`useAdobeFormTracking.js`**
```javascript
import { useEffect } from "react";

const useAdobeFormTracking = (formId) => {
  useEffect(() => {
    const form = document.getElementById(formId);
    if (!form) return;

    const handleChange = (event) => {
      if (window._satellite) {
        window._satellite.track("form_field_interaction", {
          fieldName: event.target.name,
          fieldValue: event.target.value,
        });
      }
    };

    const handleBlur = () => {
      if (window._satellite) {
        window._satellite.track("form_abandonment", { formId });
      }
    };

    form.addEventListener("input", handleChange);
    window.addEventListener("beforeunload", handleBlur);

    return () => {
      form.removeEventListener("input", handleChange);
      window.removeEventListener("beforeunload", handleBlur);
    };
  }, [formId]);
};

export default useAdobeFormTracking;
```

#### **How to Use It in a Form Component**
```javascript
import useAdobeFormTracking from "../hooks/useAdobeFormTracking";

const SignupForm = () => {
  useAdobeFormTracking("signupForm");

  return (
    <form id="signupForm">
      <input type="text" name="username" placeholder="Username" />
      <input type="email" name="email" placeholder="Email" />
      <button type="submit">Submit</button>
    </form>
  );
};

export default SignupForm;
```

---

### **Why Use React Hooks for Adobe Analytics?**
✔ **Reusable** – Use in any component without duplicating tracking logic.  
✔ **Separation of Concerns** – Keeps tracking logic separate from UI code.  
✔ **Performance Optimized** – Hooks only run when dependencies change.  

Would you like help with **debugging Adobe Analytics events in React?**

