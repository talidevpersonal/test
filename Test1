import React, { useEffect, useRef } from "react";
import { useDispatch, useSelector } from "react-redux";
import { fetchMeetings } from "./meetingsSlice";
import dayjs from "dayjs";

const GroupedMeetings = () => {
  const dispatch = useDispatch();
  const { meetings, status, hasMore, page } = useSelector((state) => state.meetings);
  const loaderRef = useRef(null);

  useEffect(() => {
    if (status === "idle") {
      dispatch(fetchMeetings({ page: 1 }));
    }
  }, [status, dispatch]);

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting && hasMore && status !== "loading") {
          dispatch(fetchMeetings({ page: page + 1 }));
        }
      },
      { threshold: 1 }
    );

    if (loaderRef.current) {
      observer.observe(loaderRef.current);
    }

    return () => {
      if (loaderRef.current) {
        observer.unobserve(loaderRef.current);
      }
    };
  }, [loaderRef, hasMore, status, dispatch, page]);

  // Group meetings by date
  const groupedMeetings = meetings.reduce((acc, meeting) => {
    const date = dayjs(meeting.time).format("YYYY-MM-DD");
    if (!acc[date]) {
      acc[date] = [];
    }
    acc[date].push(meeting);
    return acc;
  }, {});

  return (
    <div>
      <h1>Meetings</h1>
      {Object.keys(groupedMeetings).map((date) => (
        <div key={date}>
          <h2>{dayjs(date).format("MMMM D, YYYY")}</h2>
          <ul>
            {groupedMeetings[date].map((meeting) => (
              <li key={meeting.id}>
                {meeting.title} - {dayjs(meeting.time).format("h:mm A")}
              </li>
            ))}
          </ul>
        </div>
      ))}
      {status === "loading" && <p>Loading...</p>}
      <div ref={loaderRef} style={{ height: "50px" }} />
    </div>
  );
};

export default GroupedMeetings;
